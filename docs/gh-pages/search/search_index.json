{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EthItem - An improved ERC1155 token with ERC20 trading capabilities. In the EthItem standard, there is no a centralized storage where to save every objectId info. In fact every NFT data is saved in a specific ERC20 token that can also work as a standalone one, and let transfer parts of an atomic object. The ERC20 represents a unique Token Id, and its supply represents the entire supply of that Token Id. You can instantiate a EthItem as a brand-new one, or as a wrapper for pre-existent classic ERC1155 NFT. In the first case, you can introduce some particular permissions to mint new tokens. In the second case, you need to send your NFTs to the Wrapped EthItem (using the classic safeTransferFrom or safeBatchTransferFrom methods) and it will create a brand new ERC20 Token or mint new supply (in the case some tokens with the same id were transfered before yours). Documentation: https://b-u-i-d-l.github.io/eth-item-token-standard/ Announcement: Early Tests using the SSJ Token : Uniswap ERC20 Approach Uniswap V2 Approve Uniswap V2 Add Liquidity Item Token - ETH Uniswap V2 Remove Liquidity Item Token - ETH Uniswap V2 Add Liquidity Item Token - ERC20 Uniswap V2 Remove Liquidity Item Token - ERC20 Uniswap V2 Swap Item Token to ETH Uniswap V2 Swap ETH to Item Token Uniswap V2 Swap Item Token to ERC20 Uniswap V2 Swap ERC20 to Item Token MooniSwap ERC20 Approach MooniSwap Approve MooniSwap Add Liquidity Item Token - ETH MooniSwap Remove Liquidity Item Token - ETH MooniSwap Add Liquidity Item Token - ERC20 MooniSwap Remove Liquidity Item Token - ERC20 MooniSwap Swap Item Token to ETH MooniSwap Swap ETH to Item Token MooniSwap Swap Item Token to ERC20 MooniSwap Swap ERC20 to Item Token Balancer ERC20 Approach Balancer Approve Balancer Add Liquidity Item Token Balancer Remove Liquidity Item Token - ERC20 Balancer Remove Only Liquidity Item Token Balancer Swap Item Token to ERC20 Balancer Swap ERC20 to Item Token ForkDelta ERC20 Approach ForkDelta Approve ForkDelta Add ForkDelta Exchange buy order 1inch ERC20 Approach 1inch Approve 1inch Lock 1inch Infinite Approve 1inch Exchange Item Token to ETH 1inch Exchange ETH to Item Token OpenSea ERC 1155 Approach OpenSea Gift to wallet OpenSea Trade","title":"Home"},{"location":"#ethitem-an-improved-erc1155-token-with-erc20-trading-capabilities","text":"In the EthItem standard, there is no a centralized storage where to save every objectId info. In fact every NFT data is saved in a specific ERC20 token that can also work as a standalone one, and let transfer parts of an atomic object. The ERC20 represents a unique Token Id, and its supply represents the entire supply of that Token Id. You can instantiate a EthItem as a brand-new one, or as a wrapper for pre-existent classic ERC1155 NFT. In the first case, you can introduce some particular permissions to mint new tokens. In the second case, you need to send your NFTs to the Wrapped EthItem (using the classic safeTransferFrom or safeBatchTransferFrom methods) and it will create a brand new ERC20 Token or mint new supply (in the case some tokens with the same id were transfered before yours).","title":"EthItem - An improved ERC1155 token with ERC20 trading capabilities."},{"location":"#documentation","text":"https://b-u-i-d-l.github.io/eth-item-token-standard/","title":"Documentation:"},{"location":"#announcement","text":"","title":"Announcement:"},{"location":"#early-tests-using-the-ssj-token","text":"","title":"Early Tests using the SSJ Token:"},{"location":"#uniswap-erc20-approach","text":"Uniswap V2 Approve Uniswap V2 Add Liquidity Item Token - ETH Uniswap V2 Remove Liquidity Item Token - ETH Uniswap V2 Add Liquidity Item Token - ERC20 Uniswap V2 Remove Liquidity Item Token - ERC20 Uniswap V2 Swap Item Token to ETH Uniswap V2 Swap ETH to Item Token Uniswap V2 Swap Item Token to ERC20 Uniswap V2 Swap ERC20 to Item Token","title":"Uniswap ERC20 Approach"},{"location":"#mooniswap-erc20-approach","text":"MooniSwap Approve MooniSwap Add Liquidity Item Token - ETH MooniSwap Remove Liquidity Item Token - ETH MooniSwap Add Liquidity Item Token - ERC20 MooniSwap Remove Liquidity Item Token - ERC20 MooniSwap Swap Item Token to ETH MooniSwap Swap ETH to Item Token MooniSwap Swap Item Token to ERC20 MooniSwap Swap ERC20 to Item Token","title":"MooniSwap ERC20 Approach"},{"location":"#balancer-erc20-approach","text":"Balancer Approve Balancer Add Liquidity Item Token Balancer Remove Liquidity Item Token - ERC20 Balancer Remove Only Liquidity Item Token Balancer Swap Item Token to ERC20 Balancer Swap ERC20 to Item Token","title":"Balancer ERC20 Approach"},{"location":"#forkdelta-erc20-approach","text":"ForkDelta Approve ForkDelta Add ForkDelta Exchange buy order","title":"ForkDelta ERC20 Approach"},{"location":"#1inch-erc20-approach","text":"1inch Approve 1inch Lock 1inch Infinite Approve 1inch Exchange Item Token to ETH 1inch Exchange ETH to Item Token","title":"1inch ERC20 Approach"},{"location":"#opensea-erc-1155-approach","text":"OpenSea Gift to wallet OpenSea Trade","title":"OpenSea ERC 1155 Approach"},{"location":"IERC1155Views/","text":"Contract IERC1155Views Path: IERC1155Views.sol Version: 1 Title: IERC1155Views - An optional utility interface to improve the ERC-1155 Standard. Description Methods totalSupply(uint256) Params name(uint256) Params symbol(uint256) Params decimals(uint256) Params uri(uint256) Params Description This interface introduces some additional capabilities for ERC-1155 Tokens. Methods totalSupply(uint256) Returns the total supply of the given token id. Params objectId : the id of the token whose availability you want to know name(uint256) Returns the name of the given token id. Params objectId : the id of the token whose name you want to know symbol(uint256) Returns the symbol of the given token id. Params objectId : the id of the token whose symbol you want to know decimals(uint256) Returns the decimals of the given token id. Params objectId : the id of the token whose decimals you want to know uri(uint256) Returns the uri of the given token id. Params objectId : the id of the token whose uri you want to know","title":"IERC1155Views"},{"location":"IERC1155Views/#contract-ierc1155views","text":"Path: IERC1155Views.sol Version: 1 Title: IERC1155Views - An optional utility interface to improve the ERC-1155 Standard. Description Methods totalSupply(uint256) Params name(uint256) Params symbol(uint256) Params decimals(uint256) Params uri(uint256) Params","title":"Contract IERC1155Views"},{"location":"IERC1155Views/#description","text":"This interface introduces some additional capabilities for ERC-1155 Tokens.","title":"Description"},{"location":"IERC1155Views/#methods","text":"","title":"Methods"},{"location":"IERC1155Views/#totalsupplyuint256","text":"Returns the total supply of the given token id.","title":"totalSupply(uint256)"},{"location":"IERC1155Views/#params","text":"objectId : the id of the token whose availability you want to know","title":"Params"},{"location":"IERC1155Views/#nameuint256","text":"Returns the name of the given token id.","title":"name(uint256)"},{"location":"IERC1155Views/#params_1","text":"objectId : the id of the token whose name you want to know","title":"Params"},{"location":"IERC1155Views/#symboluint256","text":"Returns the symbol of the given token id.","title":"symbol(uint256)"},{"location":"IERC1155Views/#params_2","text":"objectId : the id of the token whose symbol you want to know","title":"Params"},{"location":"IERC1155Views/#decimalsuint256","text":"Returns the decimals of the given token id.","title":"decimals(uint256)"},{"location":"IERC1155Views/#params_3","text":"objectId : the id of the token whose decimals you want to know","title":"Params"},{"location":"IERC1155Views/#uriuint256","text":"Returns the uri of the given token id.","title":"uri(uint256)"},{"location":"IERC1155Views/#params_4","text":"objectId : the id of the token whose uri you want to know","title":"Params"},{"location":"IERC20NFTWrapper/","text":"Contract IEthItem Path: IERC20NFTWrapper.sol Version: 1 Title: ERC20NFTWrapper Interface Description Methods init(uint256, memory, memory, uint256) Params mainWrapper() objectId() mint(address, uint256) Params burn(address, uint256) Params Description This ERC20 contract contains the information on the ownership of all the shards of this ERC1155 objectId . There is a IERC20NFTWrapper for each objectId contained in the main ERC1155. The ERC1155 contains the mapping of objectId->address which in turns contain the mapping objectId->amount . Methods init(uint256, memory, memory, uint256) Params objectId : Id of the object to wrap name : Name of the token symbol : Ticker symbol of the token decimals : Decimals amount of the token mainWrapper() GET the ERC1155 address that owns this token. objectId() GET the objectId that this token represents in the ERC1155 collection. mint(address, uint256) Mint ERC20 and send them to the address. Note: only the mainWrapper is allowed to mint Params owner : Address of the owner of the minted ERC20. amount : Amount to mint burn(address, uint256) Burn the ERC20 of the owner. Note: only the mainWrapper is allowed to burn Params owner : Address of the owner of the burnt ERC20 amount : Amount of token to burn","title":"IERC20NFTWrapper"},{"location":"IERC20NFTWrapper/#contract-iethitem","text":"Path: IERC20NFTWrapper.sol Version: 1 Title: ERC20NFTWrapper Interface Description Methods init(uint256, memory, memory, uint256) Params mainWrapper() objectId() mint(address, uint256) Params burn(address, uint256) Params","title":"Contract IEthItem"},{"location":"IERC20NFTWrapper/#description","text":"This ERC20 contract contains the information on the ownership of all the shards of this ERC1155 objectId . There is a IERC20NFTWrapper for each objectId contained in the main ERC1155. The ERC1155 contains the mapping of objectId->address which in turns contain the mapping objectId->amount .","title":"Description"},{"location":"IERC20NFTWrapper/#methods","text":"","title":"Methods"},{"location":"IERC20NFTWrapper/#inituint256-memory-memory-uint256","text":"","title":"init(uint256, memory, memory, uint256)"},{"location":"IERC20NFTWrapper/#params","text":"objectId : Id of the object to wrap name : Name of the token symbol : Ticker symbol of the token decimals : Decimals amount of the token","title":"Params"},{"location":"IERC20NFTWrapper/#mainwrapper","text":"GET the ERC1155 address that owns this token.","title":"mainWrapper()"},{"location":"IERC20NFTWrapper/#objectid","text":"GET the objectId that this token represents in the ERC1155 collection.","title":"objectId()"},{"location":"IERC20NFTWrapper/#mintaddress-uint256","text":"Mint ERC20 and send them to the address. Note: only the mainWrapper is allowed to mint","title":"mint(address, uint256)"},{"location":"IERC20NFTWrapper/#params_1","text":"owner : Address of the owner of the minted ERC20. amount : Amount to mint","title":"Params"},{"location":"IERC20NFTWrapper/#burnaddress-uint256","text":"Burn the ERC20 of the owner. Note: only the mainWrapper is allowed to burn","title":"burn(address, uint256)"},{"location":"IERC20NFTWrapper/#params_2","text":"owner : Address of the owner of the burnt ERC20 amount : Amount of token to burn","title":"Params"},{"location":"IEthItem/","text":"Contract IEthItem Path: IEthItem.sol Version: 1 Title: EthItem Interface - An improved ERC1155 token with ERC20 trading capabilities Description Methods init(address,string,string) Params mint(uint256,string) Params burn(uint256,uint256) Params burnBatch(uint256[],uint256[]) Params erc20NFTWrapperModel() asERC20(uint256) Params Description In the EthItem standard, there is no a centralized storage where to save every objectId info. In fact every NFT data is saved in a specific ERC20 token that can also work as a standalone one, and let transfer parts of an atomic object. The ERC20 represents a unique Token Id, and its supply represents the entire supply of that Token Id. You can instantiate a EthItem as a brand-new one, or as a wrapper for pre-existent classic ERC1155 NFT. In the first case, you can introduce some particular permissions to mint new tokens. In the second case, you need to send your NFTs to the Wrapped EthItem (using the classic safeTransferFrom or safeBatchTransferFrom methods) and it will create a brand new ERC20 Token or mint new supply (in the case some tokens with the same id were transferred before yours). Methods init(address,string,string) Constructor When you create a EthItem, you can specify if you want to create a brand new one, passing the classic data like name, symbol, amd URI, or wrap a pre-existent ERC1155 NFT, passing its contract address. You can use just one of the two modes at the same time. In both cases, a ERC20 token address is mandatory. It will be used as a model to be cloned for every minted NFT. Params erc20NFTWrapperModel : the address of the ERC20 pre-deployed model. It will not be used in the procedure, but just cloned as a brand-new one every time a new NFT is minted. name : the name of the brand new EthItem to be created. If you are wrapping a pre-existing ERC1155 NFT, this must be blank. symbol : the symbol of the brand new EthItem to be created. If you are wrapping a pre-existing ERC1155 NFT, this must be blank. mint(uint256,string) Mint If the EthItem does not wrap a pre-existent NFT, this call is used to mint new NFTs, according to the permission rules provided by the Token creator. Params amount : The amount of tokens to be created. It must be greater than 1 unity. partialUri : The Uri to locate this new token's metadata. burn(uint256,uint256) Burn You can choose to burn your NFTs. In case this Token wraps a pre-existent ERC1155 NFT, you will receive the wrapped NFTs. Params amount : Amount of the object to burn to burn objectId : Id of the object to burn burnBatch(uint256[],uint256[]) Burn Batch Same as burn, but for multiple NFTs at the same time Params amounts : Array of amounts of the objects to burn objectIds : Array of ids of the objects to burn erc20NFTWrapperModel() GET the erc20NFTWrapperModel asERC20(uint256) GET the IERC20NFTWrapper of the corresponding objectId Params objectId : objectId of which to get an ERC20 representation","title":"IEthItem"},{"location":"IEthItem/#contract-iethitem","text":"Path: IEthItem.sol Version: 1 Title: EthItem Interface - An improved ERC1155 token with ERC20 trading capabilities Description Methods init(address,string,string) Params mint(uint256,string) Params burn(uint256,uint256) Params burnBatch(uint256[],uint256[]) Params erc20NFTWrapperModel() asERC20(uint256) Params","title":"Contract IEthItem"},{"location":"IEthItem/#description","text":"In the EthItem standard, there is no a centralized storage where to save every objectId info. In fact every NFT data is saved in a specific ERC20 token that can also work as a standalone one, and let transfer parts of an atomic object. The ERC20 represents a unique Token Id, and its supply represents the entire supply of that Token Id. You can instantiate a EthItem as a brand-new one, or as a wrapper for pre-existent classic ERC1155 NFT. In the first case, you can introduce some particular permissions to mint new tokens. In the second case, you need to send your NFTs to the Wrapped EthItem (using the classic safeTransferFrom or safeBatchTransferFrom methods) and it will create a brand new ERC20 Token or mint new supply (in the case some tokens with the same id were transferred before yours).","title":"Description"},{"location":"IEthItem/#methods","text":"","title":"Methods"},{"location":"IEthItem/#initaddressstringstring","text":"Constructor When you create a EthItem, you can specify if you want to create a brand new one, passing the classic data like name, symbol, amd URI, or wrap a pre-existent ERC1155 NFT, passing its contract address. You can use just one of the two modes at the same time. In both cases, a ERC20 token address is mandatory. It will be used as a model to be cloned for every minted NFT.","title":"init(address,string,string)"},{"location":"IEthItem/#params","text":"erc20NFTWrapperModel : the address of the ERC20 pre-deployed model. It will not be used in the procedure, but just cloned as a brand-new one every time a new NFT is minted. name : the name of the brand new EthItem to be created. If you are wrapping a pre-existing ERC1155 NFT, this must be blank. symbol : the symbol of the brand new EthItem to be created. If you are wrapping a pre-existing ERC1155 NFT, this must be blank.","title":"Params"},{"location":"IEthItem/#mintuint256string","text":"Mint If the EthItem does not wrap a pre-existent NFT, this call is used to mint new NFTs, according to the permission rules provided by the Token creator.","title":"mint(uint256,string)"},{"location":"IEthItem/#params_1","text":"amount : The amount of tokens to be created. It must be greater than 1 unity. partialUri : The Uri to locate this new token's metadata.","title":"Params"},{"location":"IEthItem/#burnuint256uint256","text":"Burn You can choose to burn your NFTs. In case this Token wraps a pre-existent ERC1155 NFT, you will receive the wrapped NFTs.","title":"burn(uint256,uint256)"},{"location":"IEthItem/#params_2","text":"amount : Amount of the object to burn to burn objectId : Id of the object to burn","title":"Params"},{"location":"IEthItem/#burnbatchuint256uint256","text":"Burn Batch Same as burn, but for multiple NFTs at the same time","title":"burnBatch(uint256[],uint256[])"},{"location":"IEthItem/#params_3","text":"amounts : Array of amounts of the objects to burn objectIds : Array of ids of the objects to burn","title":"Params"},{"location":"IEthItem/#erc20nftwrappermodel","text":"GET the erc20NFTWrapperModel","title":"erc20NFTWrapperModel()"},{"location":"IEthItem/#aserc20uint256","text":"GET the IERC20NFTWrapper of the corresponding objectId","title":"asERC20(uint256)"},{"location":"IEthItem/#params_4","text":"objectId : objectId of which to get an ERC20 representation","title":"Params"}]}